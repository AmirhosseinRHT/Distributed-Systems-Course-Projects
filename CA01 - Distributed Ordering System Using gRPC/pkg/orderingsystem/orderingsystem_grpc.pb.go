// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: orderingsystem.proto

package orderingsystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Orderingsystem_SearchOrders_FullMethodName  = "/orderingsystem.orderingsystem/SearchOrders"
	Orderingsystem_ProcessOrders_FullMethodName = "/orderingsystem.orderingsystem/ProcessOrders"
)

// OrderingsystemClient is the client API for Orderingsystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderingsystemClient interface {
	// Server Streaming RPC
	SearchOrders(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (Orderingsystem_SearchOrdersClient, error)
	// Bidirectional Streaming RPC
	ProcessOrders(ctx context.Context, opts ...grpc.CallOption) (Orderingsystem_ProcessOrdersClient, error)
}

type orderingsystemClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderingsystemClient(cc grpc.ClientConnInterface) OrderingsystemClient {
	return &orderingsystemClient{cc}
}

func (c *orderingsystemClient) SearchOrders(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (Orderingsystem_SearchOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Orderingsystem_ServiceDesc.Streams[0], Orderingsystem_SearchOrders_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderingsystemSearchOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Orderingsystem_SearchOrdersClient interface {
	Recv() (*OrderResponse, error)
	grpc.ClientStream
}

type orderingsystemSearchOrdersClient struct {
	grpc.ClientStream
}

func (x *orderingsystemSearchOrdersClient) Recv() (*OrderResponse, error) {
	m := new(OrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderingsystemClient) ProcessOrders(ctx context.Context, opts ...grpc.CallOption) (Orderingsystem_ProcessOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Orderingsystem_ServiceDesc.Streams[1], Orderingsystem_ProcessOrders_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderingsystemProcessOrdersClient{stream}
	return x, nil
}

type Orderingsystem_ProcessOrdersClient interface {
	Send(*OrderRequest) error
	Recv() (*OrderResponse, error)
	grpc.ClientStream
}

type orderingsystemProcessOrdersClient struct {
	grpc.ClientStream
}

func (x *orderingsystemProcessOrdersClient) Send(m *OrderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderingsystemProcessOrdersClient) Recv() (*OrderResponse, error) {
	m := new(OrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderingsystemServer is the server API for Orderingsystem service.
// All implementations must embed UnimplementedOrderingsystemServer
// for forward compatibility
type OrderingsystemServer interface {
	// Server Streaming RPC
	SearchOrders(*OrderRequest, Orderingsystem_SearchOrdersServer) error
	// Bidirectional Streaming RPC
	ProcessOrders(Orderingsystem_ProcessOrdersServer) error
	mustEmbedUnimplementedOrderingsystemServer()
}

// UnimplementedOrderingsystemServer must be embedded to have forward compatible implementations.
type UnimplementedOrderingsystemServer struct {
}

func (UnimplementedOrderingsystemServer) SearchOrders(*OrderRequest, Orderingsystem_SearchOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchOrders not implemented")
}
func (UnimplementedOrderingsystemServer) ProcessOrders(Orderingsystem_ProcessOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessOrders not implemented")
}
func (UnimplementedOrderingsystemServer) mustEmbedUnimplementedOrderingsystemServer() {}

// UnsafeOrderingsystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderingsystemServer will
// result in compilation errors.
type UnsafeOrderingsystemServer interface {
	mustEmbedUnimplementedOrderingsystemServer()
}

func RegisterOrderingsystemServer(s grpc.ServiceRegistrar, srv OrderingsystemServer) {
	s.RegisterService(&Orderingsystem_ServiceDesc, srv)
}

func _Orderingsystem_SearchOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderingsystemServer).SearchOrders(m, &orderingsystemSearchOrdersServer{stream})
}

type Orderingsystem_SearchOrdersServer interface {
	Send(*OrderResponse) error
	grpc.ServerStream
}

type orderingsystemSearchOrdersServer struct {
	grpc.ServerStream
}

func (x *orderingsystemSearchOrdersServer) Send(m *OrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Orderingsystem_ProcessOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderingsystemServer).ProcessOrders(&orderingsystemProcessOrdersServer{stream})
}

type Orderingsystem_ProcessOrdersServer interface {
	Send(*OrderResponse) error
	Recv() (*OrderRequest, error)
	grpc.ServerStream
}

type orderingsystemProcessOrdersServer struct {
	grpc.ServerStream
}

func (x *orderingsystemProcessOrdersServer) Send(m *OrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderingsystemProcessOrdersServer) Recv() (*OrderRequest, error) {
	m := new(OrderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Orderingsystem_ServiceDesc is the grpc.ServiceDesc for Orderingsystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orderingsystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderingsystem.orderingsystem",
	HandlerType: (*OrderingsystemServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchOrders",
			Handler:       _Orderingsystem_SearchOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProcessOrders",
			Handler:       _Orderingsystem_ProcessOrders_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "orderingsystem.proto",
}
